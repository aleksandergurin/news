
To run application in development mode you need:

1) create virtual environment
    $ virtualenv venv

2) activate virtual environment
    $ source venv/bin/activate

3) install dependencies
    $ pip install -r requirements

4) create SQLite database
    $ python manage.py create_db

5) run application
    $ python wsgi.py

In production you need to set some environment variables:

    FLASK_CONFIG=production
    SECRET_KEY=some-random-sting
    DATABASE_URL=db-url-for-sqlalchemy

Then you can create database and run application. In production it's better to run
application with either gunicorn server or uwsgi server:

    gunicorn:     gunicorn -b 0.0.0.0:8080 wsgi:app
    uwsgi:        uwsgi --http 0.0.0.0:8080 --chdir /path/to/news-app --venv venv -w wsgi:app


If application suffer from heavy load it's better to store sessions in some
storage (e.g. Redis), use some load balancer (e.g. nginx) and many backend
server that run applications. In such a way you could achieve pretty good
scalability.


Example of nginx configuration for load balancing:

worker_processes  1;

events {
    worker_connections 1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile           on;
    keepalive_timeout  65;

    gzip  on;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/javascript text/xml application/xml application/rss+xml application/atom+xml application/rdf+xml;


    upstream backend {
        server 127.0.0.1:8081;
        # server 127.0.0.1:8082;
    }

    server {
        listen       8080;
        server_name  localhost;

        # proxy dynamic requests
        location / {
            proxy_pass http://backend;
            # proxy_redirect off;

            # set some headers for proxy-awareness
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            # web socket connections
            #proxy_http_version 1.1;
            #proxy_set_header Upgrade $http_upgrade;
            #proxy_set_header Connection "upgrade";
        }

        # serve static requests
        #location /static {
        #    root www;
        #}

        #error_page   403 404          /404.html;
        #error_page   500 502 503 504  /50x.html;
    }
}
